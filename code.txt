#Main script





@Library(['luigi-shared-library@mvn-skip-tests', 'pipeline-library'])_

runMultiBranchJobTemplate teamName: 'frauddispute',
        appName: 'merchantfraud-transaction-lookup-service',
        k8sNamespace: 'featurespace-micro',
        deployXmlPath: 'deployit-manifest.xml',
        resourcesYamlPath: 'resources.yaml',
        xldPackageIdSuffix: 'FRAUDSIGHT/merchantfraud-transaction-lookup-service',
        imageTag: '784102274315.dkr.ecr.us-east-2.amazonaws.com/frauddispute/merchantfraud/merchantfraud-transaction-lookup-service',
        checkmarxProjectName: 'merchantfraud-transaction-lookup-service'




//buildkpackimage






//def call(Map config =[:]){
def call (String kpackNamespace, String appName, String imageTag){

    withKubeConfig(credentialsId: 'kpack-kubeconfig') {

        script {

            String name = sh(
                    script: "kubectl get images -o json -n ${kpackNamespace} " +
                            "| jq --raw-output '.items[] " +
                            "| select(.metadata.name == \"${appName}\").metadata.name'",
                    returnStdout: true
            ).trim()

            boolean kpackImageResourceDoesntExistYet = name == null || name.equals('')

            if (kpackImageResourceDoesntExistYet) {

                sh "echo 'Creating Image Resource'"

                String scmUrl = scm.getUserRemoteConfigs()[0].getUrl()

                sh """
                    kubectl apply -f - <<EOF
apiVersion: kpack.io/v1alpha2
kind: Image
metadata:
  name: ${appName}
  namespace: ${kpackNamespace}
spec:
  additionalTags:
    - ${env.IMAGE_TAG}
  build:
    env:
      - name: BP_JVM_VERSION
        value: "17"
    services:
      - kind: Secret
        name: maven
      - kind: Secret
        name: certs
  builder:
    kind: ClusterBuilder
    name: jammy-tiny-custom
  serviceAccountName: kpack
  source:
    git:
      revision: ${env.GIT_COMMIT}
      url: ${scmUrl}
  tag: ${imageTag}
EOF
                    """

                sh 'sleep 10'

            } else {

                sh "kp image patch ${appName} -n ${kpackNamespace} --additional-tag ${env.IMAGE_TAG} && sleep 3"

                String existingImageRevision = sh(
                        script: "kubectl get image -o jsonpath={.spec.source.git.revision} -n ${kpackNamespace} ${appName}",
                        returnStdout: true
                ).trim()

                def imageAlreadyBuiltForCurrentCommit = existingImageRevision.equals("${env.GIT_COMMIT}".toString())

                if (imageAlreadyBuiltForCurrentCommit) {

                    sh "kp image trigger ${appName} -n ${kpackNamespace} && sleep 3"

                } else {

                    sh "kp image save ${appName} --git-revision ${env.GIT_COMMIT} -n ${kpackNamespace} && sleep 3"
                }
            }

            sh "kp build logs ${appName} -n ${kpackNamespace}"
            sh "kp image patch ${appName} -n ${kpackNamespace} --delete-additional-tag ${env.IMAGE_TAG}"
        }
    }
                
}




//Checkmarx scan




def call(Map config = [:]) {

    step([$class: 'CxScanBuilder',
          avoidDuplicateProjectScans: true,
          comment: 'scan created by jenkins',
//          credentialsId: 'checkmarx-scan-docet-user',
          excludeFolders: '!**/*modules/**, modules',
//          excludeOpenSourceFolders: '',
          exclusionsSetting: 'global',
          failBuildOnNewResults: false,
          failBuildOnNewSeverity: 'HIGH',
//          filterPattern: '''!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*, !**/node_modules/**/*,  !**/.bzr/**/*, !**/bin/**/*,
//          !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.ipr,     !**/*.iws,  !**/.mvn/**/*,
//          !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3,
//          !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx,
//          !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob,
//          !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf,
//          !**/*.jar,     !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz,
//          !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm,
//          !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.war, !**/*.ear,
//          !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm,
//          !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*''',
          fullScanCycle: 10,
          generatePdfReport: true,
          teamPath: "\\CxServer\\SP\\WorldPay\\DisputesValueStream\\MerchantDisputes",
//          includeOpenSourceFolders: '',
          osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz',
          osaInstallBeforeScan: false, preset: '100000',
          projectName: config.checkmarxProjectName + '_dev',
          sastEnabled: true,
          sourceEncoding: '1',
//          username: '',
          vulnerabilityThresholdResult: 'FAILURE',
          waitForResultsEnabled: true])
}


//createReportfile



def call(Map config = [:]) {
    def content = """\
                  <html><head><title>${config.repo} Report</title><style>
                  #TestCategory {
                      font-family: "Trebuchet MS", Arial, Helvetica, sans-serif;
                      width: 100%;
                      border-collapse: collapse;
                  }
                  #TestCategory td, #TestCategory th {
                      font-size: 1em;
                      border: 1px solid #000000;
                      padding: 3px 7px 2px 7px;
                  }
                  #TestCategory th {
                      font-size: 1.1em;
                      text-align: left;
                      padding-top: 5px;
                      padding-bottom: 4px;
                      background-color: #1E90FF;
                      color: #ffffff;
                  }
                  </style></head>
                  <body>
                  <font face="Trebuchet MS, Arial, Helvetica, sans-serif">
                  <p><b>Build Number: </b>${env.BUILD_NUMBER}</p>
                  <p><b>Logs: </b>
                  <a href="${BUILD_URL}Logs">All Logs</a></p>
                  <p><b>Workflow View: </b>
                  <a href="${JOB_URL}workflow-stage/">Workflow</a></p>
                  <p><b>Branch: ${config.branch}</b></p>
                  <table border="1" id="TestCategory">
                  <tr><th>Step</th><th>Status</th></tr>""".stripIndent()

    fileOperations([fileCreateOperation(fileContent: content, fileName: 'index.html')])
}



//deployToKubernetesViaXLD


def call(Map config = [:]) {
    echo 'Deploying to Kubernetes...'
    sh "echo '<tr><td>Deploy to Kubernetes</td><td>' >> ${config.reportFile}"

    try {
        xldDeploy environmentId: "Environments/${config.environmentId}", packageId: "Applications/${config.packageId}", serverCredentials: "${config.serverCredentials}"
        echo 'Deploy to Kubernetes - Successful'
        sh """ echo '<font color="green">Successful</font></td></tr>' >> ${config.reportFile} """
    } catch (exception) {
        echo 'Deploy to Kubernetes - Failure'
        sh """ echo '<font color="red">Failed</font></td></tr>' >> ${config.reportFile} """
        error exception.toString()
    }
}



//deployToXLD




def call(Map config = [:]) {
    echo 'Publishing to XL Deploy...'
    sh "echo '<tr><td>Publish to XL Deploy</td><td>' >> ${config.reportFile}"

    try {
        xldCreatePackage  artifactsPath: '.', darPath: "spring-${config.repo}-${config.tag}.dar", manifestPath: 'deployit-manifest.xml'
        xldPublishPackage darPath: "spring-${config.repo}-${config.tag}.dar", serverCredentials: 'test-xl-deploy'
        echo 'Publish to XL Deploy - Successful'
        sh """ echo '<font color="green">Successful</font></td></tr>' >> ${config.reportFile} """
    } catch (exception) {
        echo 'Publish to XL Deploy - Failure'
        sh """ echo '<font color="red">Failed</font></td></tr>' >> ${config.reportFile} """
        error exception.toString()
    }
}



//runMultiBranchJobTemplate





def call(Map config = [:]) {

    String teamName = config.teamName
    String appName = config.appName
    String k8sNamespace = config.k8sNamespace
    String deployXmlPath = config.deployXmlPath
    String resourcesYamlPath = config.resourcesYamlPath
    String xldPackageIdSuffix = config.xldPackageIdSuffix
    String imageTag = config.imageTag
    def checkmarxProjectName = config.checkmarxProjectName

    String xldEnvironmentId
    String kpackNamespace

    pipeline {

        agent {

            kubernetes {

                label 'kpack'
                defaultContainer 'kpack'
                yaml libraryResource('agents/k8s/kpack.yaml')
            }
        }

        parameters {

            choice(name: 'DEPLOYMENT_ENVIRONMENT',
                    choices: "Dev\n" +
                            "Test\n",
                    description: 'Which environment to deploy to?')
            booleanParam(name: 'SONARQUBE_SCAN', defaultValue: false, description: 'Scan code w/ SonarQube')
            booleanParam(name: 'RUN_CHECKMARX_SCAN', defaultValue: false, description: 'Scan code w/ Checkmarx')
            booleanParam(name: 'BUILD_IMAGE_AND_DEPLOY', defaultValue: true, description: 'Build OCI image and deploy')
            booleanParam(name: 'SYSDIG_SCAN', defaultValue: false, description: 'Scan image w/ Sysdig')
            booleanParam(name: 'RELEASE_BUILD', defaultValue: false, description: 'Whether to add the POM version label to the image tag')
        }

        environment {

            APP_NAME = "${appName}"
            BUILD_VERSION = readMavenPom().getVersion()
            K8S_NAMESPACE = "${k8sNamespace}"
            XLD_APPLICATION_FOLDER = "${xldPackageIdSuffix}"
            RESOURCE_YAML_LOCATION = "${resourcesYamlPath}"
            IMAGE_TAG = buildImageTag(imageTag, env.BRANCH_NAME, env.BUILD_VERSION, env.BUILD_NUMBER, params.RELEASE_BUILD)
            XLD_APP_VERSION = buildXldVersion(env.BUILD_VERSION, env.BUILD_NUMBER, env.BRANCH_NAME, params.RELEASE_BUILD)
        }

        stages {

            stage('Validation and Setup') {

                steps {

                    script {

                        validateTeamName(teamName)
                        xldEnvironmentId = determineXldEnvironmentId(teamName, params.DEPLOYMENT_ENVIRONMENT)
                        kpackNamespace = determineKpackNamespace(teamName)
                    }
                }
            }

            stage('Build Source and Run Tests') {

                steps {

                    echo 'Building source...'

                    script {

                        sh "mvn -B package -Dmaven.test.skip"

                        stash includes: '*', name: 'builtSources'
                    }
                }
            }

            stage('Scan with SonarQube') {

                when { expression { params.SONARQUBE_SCAN == true } }

                steps {

                    sonarQubeScan()
                }
            }

            stage('Checkmarx scan') {

                when { expression { params.RUN_CHECKMARX_SCAN == true } }

                steps {

                    checkMarxScan(checkmarxProjectName: "${checkmarxProjectName}")

                    emailext body: 'Please find attached the latest scan PDF report.',
                            attachmentsPattern: 'Checkmarx/Reports/**/*.pdf',
                            recipientProviders: [[$class: 'RequesterRecipientProvider']],
                            subject: "Fraud sight Checkmarx scan PDF report",
                            to: 'collin.stolpa@fisglobal.com'
                }
            }

            stage('Build Image with kpack') {

                when { expression { params.BUILD_IMAGE_AND_DEPLOY } }

                steps {
                    buildKpackImage(kpackNamespace, appName, imageTag)
                }
            }

            stage('Scan image w/ Sysdig') {

                when { expression { params.BUILD_IMAGE_AND_DEPLOY && params.SYSDIG_SCAN } }

                steps {

                    container('kpack') {

                        script {

                            withCredentials([aws(credentialsId: 'svc-ecr-repo-prod-user',
                                    accessKeyVariable: 'AWS_ACCESS_KEY_ID',
                                    secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {

                                env.AWS_ECR_PASSWORD = sh(
                                        script: "aws ecr get-login-password --region us-east-2",
                                        returnStdout: true
                                ).trim()
                            }
                        }
                    }

                    container('sysdig') {

                        withCredentials([string(credentialsId: 'sysdig-token', variable: 'SYSDIG_TOKEN')]) {

                            wrap([$class          : 'MaskPasswordsBuildWrapper',
                                  varPasswordPairs: [[password: "${env.AWS_ECR_PASSWORD}"]]]) {

                                sh """/sysdig-inline-scan.sh \
                                    --sysdig-token ${SYSDIG_TOKEN} \
                                    --registry-auth-basic AWS:${env.AWS_ECR_PASSWORD} \
                                    ${env.IMAGE_TAG}
                                    """
                            }
                        }
                    }
                }
            }

            stage('Publish to XL Deploy') {

                when { expression { params.BUILD_IMAGE_AND_DEPLOY } }

                steps {

                    script {

                        sh "echo Publish to XL Deploy"
                        sh "echo BRANCH_NAME is: ${env.BRANCH_NAME}"

                        sh "envsubst < ${resourcesYamlPath} > temp"
                        sh "cat temp"
                        sh "rm ${resourcesYamlPath} && mv temp ${resourcesYamlPath}"

                        xldCreatePackage artifactsPath: '.',
                                darPath: "${appName}-${env.BUILD_VERSION}.${env.BUILD_NUMBER}-${env.BRANCH_NAME}.dar",
                                manifestPath: "${deployXmlPath}"
                        xldPublishPackage darPath: "${appName}-${env.BUILD_VERSION}.${env.BUILD_NUMBER}-${env.BRANCH_NAME}.dar",
                                serverCredentials: 'xld-uat'
                    }
                }

                post {

                    success {

                        echo "Publish to XL Deploy - Successful"
                    }

                    failure {

                        echo "Publish to XL Deploy - Failure"
                    }
                }
            }

            stage('Deploy to Kubernetes') {

                when { expression { params.BUILD_IMAGE_AND_DEPLOY } }

                steps {

                    script {

                        xldDeploy environmentId: "${xldEnvironmentId}",
                                packageId: "Applications/${xldPackageIdSuffix}/${env.XLD_APP_VERSION}",
                                serverCredentials: 'xld-uat'
                    }
                }

                post {

                    success {

                        echo "Deploy to Kubernetes - Successful"
                    }

                    failure {

                        echo "Deploy to Kubernetes - Failure"
                    }
                }
            }
        }
    }

}

static String buildImageTag(String imageTag, String branchName, String buildVersion, String buildNumber, boolean isReleaseBuild) {

    if (!isReleaseBuild) {

        return imageTag + ":devbuild-" + branchName + "-" + buildVersion + "-" + buildNumber

    } else {

        return imageTag + ":release-" + branchName + "-" + buildVersion + "-" + buildNumber
    }
}

static String buildXldVersion(String buildVersion, String buildNumber, String branchName, boolean isReleaseBuild) {

    if (!isReleaseBuild) {

        return buildVersion + "-" + buildNumber + "-" + branchName + "-devbuild"

    } else {

        return buildVersion + "-" + buildNumber + "-" + branchName + "-release"
    }
}

static void validateTeamName(String teamName) {

    ArrayList<String> validTeamNames = ["enterprise-api", "frauddispute"]

    if (!validTeamNames.contains(teamName)) {

        error('Invalid teamName passed. Valid team names: ' + validTeamNames)
    }
}

static String determineXldEnvironmentId(String teamName, String environment) {

    if ('enterprise-api'.equals(teamName)) {

        switch (environment) {

            case 'Dev':
                return 'Environments/docet/prod'
            case 'Test':
                return 'Environments/docet/prod'
        }
    } else if ('frauddispute'.equals(teamName)) {

        switch (environment) {

            case 'Dev':
                return 'Environments/frauddispute/frauddispute-dev'
            case 'Test':
                return 'Environments/frauddispute/frauddispute-test'
        }
    }

    error('Unable to determine XLD environment ID')
}

static String determineKpackNamespace(String teamName) {

    if ('enterprise-api'.equals(teamName)) {

        return 'kpack-fraudsight'

    } else if ('frauddispute'.equals(teamName)) {

        return 'kpack-fraudsight'
    }

    error('Unable to determine kpack namespace')
}




//runMultiBranchJobTemplateAngular




def call(Map config = [:]) {
    def repoName = config.repoName
    def testWithDocker = config.testWithDocker
    def skipUnitTests = config.skipUnitTests
    def emailRecipientsList = config.emailRecipients
    def cx_project = config.cx_project
  
    def runCheckmarx = config.runCheckmarx
    echo 'runCheckmarx: ' + runCheckmarx
    echo 'config.runCheckmarx: ' + config.runCheckmarx
    if(runCheckmarx == null) {
    	runCheckmarx=false
    }
    
    def usesVoltage = config.usesVoltage
    echo 'usesVoltage: ' + usesVoltage
    echo 'config.usesVoltage: ' + config.usesVoltage
    if(usesVoltage == null) {
    	usesVoltage=false
    }
    
    def xldEnvironmentFolder = config.xldEnvironmentFolder
    if(xldEnvironmentFolder == null || xldEnvironmentFolder.trim().isEmpty()){
    	xldEnvironmentFolder='Frauddispute/DEV/Frauddispute_DEV'
    }
    
    def xldApplicationFolder = config.xldApplicationFolder
    if(xldApplicationFolder == null || xldApplicationFolder.trim().isEmpty()){
    	xldApplicationFolder='FRAUDDISPUTE/TEST'
    }
    
    def appVersion = config.appVersion
    if(appVersion == null || appVersion.trim().isEmpty()){
    	appVersion=''
    }else {
    	appVersion = "-${appVersion}"
    	appVersionNoDash = config.appVersion
    }
        
    def runSonar = config.runSonar
    if(runSonar == null) {
    	runSonar=false
    }
    
    def publishToXld = config.publishToXld
    if(publishToXld == null) {
    	publishToXld=true
    }
    
    def deployToKubernetes = config.deployToKubernetes
    if(deployToKubernetes == null) {
    	deployToKubernetes=true
    }
    
    def enableDockerImage = config.enableDockerImage
    if(enableDockerImage == null) {
    	enableDockerImage=true
    }
    
    def gitSshCredentials = 'svc-usjenkins-devops'
    def cloneUrl = "git@github.worldpay.com:Worldpay/${repoName}.git"
    def nexusRegistry = "slflokydlnexs60.infoftps.com/frauddispute"
    def buildTag = '' 
    def branchNamePlaceholder = ''
    def branchNameNoDashPlaceholder = ''
  
    if(!(env.BRANCH_NAME ==~ /^([0-9]+\.[0-9]+\.[0-9])/)) {        
    	branchNamePlaceholder = "-${env.BRANCH_NAME}"
    	branchNameNoDashPlaceholder = "${env.BRANCH_NAME}"  
     } 

    def xldPackageId = "${xldApplicationFolder}/${repoName}${branchNamePlaceholder}"
    		
    pipeline {
        agent {label 'puflopjenkap02'}

        parameters {
            string(description: 'List of Email Report Recipients', name: 'recipients', defaultValue: emailRecipientsList)
            string(description: 'Checkmarx Project name for this build', name: 'cx_project',  defaultValue: repoName)
            booleanParam(defaultValue: runCheckmarx, description: 'Run Checkmarx Scan?', name: 'runCheckmarxParam')
            booleanParam(defaultValue: runSonar, description: 'Run SonarQube Scan?', name: 'runSonar')
            booleanParam(defaultValue: publishToXld, description: 'Publish to XLD?', name: 'publishToXld')
            booleanParam(defaultValue: deployToKubernetes, description: 'Deploy to Kubernetes?', name: 'deployToKubernetes')
            booleanParam(defaultValue: enableDockerImage, description: 'Build Docker Image?', name: 'enableDockerImage')
        }

      //  tools {
       //     maven 'maven-3.5.2-pugrarjenkap01'
       //     jdk 'jdk-10.0.2'
      //  }

        environment {
          //  MAVEN_OPTS = '--add-modules java.xml.bind -Xmx1024m -XX:MaxPermSize=512m -Djdk.tls.client.protocols=TLSv1.2 -Dhttps.protocols=TLSv1.2 -Dmaven.wagon.http.ssl.insecure=true -Dmaven.wagon.http.ssl.allowall=true'
            REPORT_FILE= "${WORKSPACE}/index.html"
            MDS_TEST_IMAGE_NAME="mds-microservice-test-${repoName}${branchNamePlaceholder}-image"
            MDS_TEST_CONTAINER_NAME="test-${repoName}${branchNamePlaceholder}"           
            BRANCH_NAME_PLACEHOLDER = "${branchNamePlaceholder}"
            BRANCH_NAME_NO_DASH_PLACEHOLDER = "${branchNameNoDashPlaceholder}"
            XLD_APPLICATION_FOLDER = "${xldApplicationFolder}"    
            APP_VERSION = "${appVersion}"
            APP_VERSION_NO_DASH = "${appVersionNoDash}"
            XLD_PACKAGE_ID = "${xldPackageId}"	
            REPO_NAME = "${repoName}"
        }

        stages {
            stage('Create report file') {
                steps {
                    createReportFile repo: repoName, branch: env.BRANCH_NAME                   
                }
            }
            
           stage('Checkmarx scan'){        	  
        	    when {
                    expression { params.runCheckmarxParam == true }                    
                }

                agent {
                    label "Checkmarx"
                }

                steps{
                	script{
                		  echo 'params.runCheckmarxParam=' + params.runCheckmarxParam
                	}
                    checkMarxScan()
                    emailext body: 'Please find attached the latest scan PDF report.', attachmentsPattern: 'Checkmarx/Reports/**/*.pdf',
             recipientProviders: [[$class: 'RequesterRecipientProvider']], subject: "Fraud sight Checkmarx scan PDF report", to: 'rupinder.singh3@fisglobal.com'
                 
                 //sendEmailNotification repo: repoName, recipients: recipients
                    deleteDir()
                }
            } 

           stage('Test with docker') {
                when {
                    expression { params.testWithDocker == true }
                }

                steps {
                    runTestsWithDocker image: MDS_TEST_IMAGE_NAME, container: MDS_TEST_CONTAINER_NAME, reportFile: REPORT_FILE
                }
            }

            stage ('Publish unit test results') {
            	when {
                    expression { params.testWithDocker == true }
                }
            	
                steps {
                    publishJUnitTestResults reportFile: REPORT_FILE
                }
            }
            
         //   stage('Build src') {
          //      steps {    
          //      	script{
         //       		 echo 'JAVA_HOME=' + env.JAVA_HOME 
          //      	}
          //          runMavenBuild sonar: params.runSonar, skipTests: skipUnitTests, reportFile: REPORT_FILE
         //       }
          //  }

            stage('Build SRC and create  image') {
            	 when {
                     expression { params.enableDockerImage == true }
                 }
                steps {      
                	script {       
                 		 if(!(env.BRANCH_NAME ==~ /^([0-9]+\.[0-9]+\.[0-9])/)) {                   			
                 			 buildTag = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"                			
                          } else {
                         	 buildTag = "${env.BRANCH_NAME}-${GIT_COMMIT[0..7]}"                                           
                          }       		
                 		 echo 'Tagging ' + buildTag
                      }
                    buildDockerImage repo: repoName, registry: nexusRegistry, tag: buildTag, reportFile: REPORT_FILE, voltage: usesVoltage
                }
            }

            stage('Push image and update k8s resources yaml') {
            	 when {
                     expression { params.enableDockerImage == true }
                 }
            	 environment {
            		 BUILD_TAG = "${buildTag}"
                 }
                steps {
                    pushDockerImage repo: repoName, registry: nexusRegistry, tag: buildTag, reportFile: REPORT_FILE
                    resolveVariablesInFile filePath: 'resources.yaml', reportFile: REPORT_FILE
                    resolveVariablesInFile filePath: 'deployit-manifest.xml', reportFile: REPORT_FILE
                }
            }

            stage('Publish to XL Deploy') {
            	 when {
                     expression { params.publishToXld == true }
                 }
                steps {
                    deployToXLD repo: repoName, tag: buildTag, reportFile: REPORT_FILE
                }
            }

            stage('Deploy to Kubernetes') {
            	when {
                    expression { params.deployToKubernetes == true }
                }
                steps {
                    deployToKubernetesViaXLD environmentId: "${xldEnvironmentFolder}", packageId: "${xldPackageId}/${buildTag}"
                }
            }


            /*stage('Qualys Security Scan') {
                steps {
                    qualysSecurityScan repo: repoName, tag: buildTag
                }
            }*/
        }

        post {
            always {
                sendEmailNotification repo: repoName, branch: env.BRANCH_NAME, recipients: recipients, reportFile: REPORT_FILE
                deleteDir() /* Clean up workspace */
            }
        }
    }
}


//runMultiBranchSPAJobTemplate




def call(Map config = [:]) {
    def repoName = config.repoName
    def testWithDocker = config.testWithDocker
    def skipUnitTests = config.skipUnitTests
    def runSonar = config.runSonar
    def emailRecipientsList = config.emailRecipients
    def xldEnvironmentFolder = config.xldEnvironmentFolder
    def cx_project = config.cx_project
    
    def runCheckmarx = config.runCheckmarx
    echo 'runCheckmarx: ' + runCheckmarx
    echo 'config.runCheckmarx: ' + config.runCheckmarx
    if(runCheckmarx == null) {
    	runCheckmarx=false
    }
    
    if(xldEnvironmentFolder == null || xldEnvironmentFolder.trim().isEmpty()){
    	xldEnvironmentFolder='MDS/MDS_DEV/MDS-DEV'
    }
    
    def xldApplicationFolder = config.xldApplicationFolder
    if(xldApplicationFolder == null || xldApplicationFolder.trim().isEmpty()){
    	xldApplicationFolder='MDS_POC'
    }

    def gitSshCredentials = 'jenkadm-github-test'
    def cloneUrl = "git@github.worldpay.com:Worldpay/${repoName}.git"
    def nexusRegistry = "slflokydlnexs60.infoftps.com:9876/mdsui"
    def buildTag = ''
    def branchNamePlaceholder = ''
    def branchNameNoDashPlaceholder = ''
    def branchNameWithForwardSlashPlaceholder = ''
    
    if(!(env.BRANCH_NAME ==~ /^([0-9]+\.[0-9]+\.[0-9])/)) {        
        branchNamePlaceholder = "-${env.BRANCH_NAME}"
        branchNameWithForwardSlashPlaceholder = "/${env.BRANCH_NAME}"	
        branchNameNoDashPlaceholder = "${env.BRANCH_NAME}"
    }
    
    pipeline {
    agent {label 'puflopjenkap02'}

    parameters {
        string(description: 'List of Email Report Recipients', name: 'recipients', defaultValue: emailRecipientsList)
        //booleanParam(defaultValue: false, description: 'Run Checkmarx Scan?', name: 'runCheckmarx')
        booleanParam(defaultValue: true, description: 'Publish to XLD?', name: 'publishToXld')
        booleanParam(defaultValue: true, description: 'Deploy to Kubernetes?', name: 'deployToKubernetes')
       }

    tools
    {
        jdk 'jdk-9.0.4'
    }

    environment {
  	   ts = new java.text.SimpleDateFormat('yyyyMMddHHmm').format(new Date())
          REPORT_FILE= "${WORKSPACE}/index.html"
          MDS_TEST_IMAGE_NAME="mds-microservice-test-${repoName}${branchNamePlaceholder}-image"
          MDS_TEST_CONTAINER_NAME="test-${repoName}${branchNamePlaceholder}"
          BRANCH_NAME_PLACEHOLDER = "${branchNamePlaceholder}"
          BRANCH_NAME_WITH_FORWARD_SLASH_PLACEHOLDER = "${branchNameWithForwardSlashPlaceholder}"
          BRANCH_NAME_NO_DASH_PLACEHOLDER = "${branchNameNoDashPlaceholder}"
          XLD_APPLICATION_FOLDER = "${xldApplicationFolder}"    
    }
    stages {
            stage('Create report file') {
                steps {
                    createReportFile repo: repoName, branch: env.BRANCH_NAME
                }
            }
      /*      stage('Checkmarx scan'){
                when {
                    expression { params.runCheckmarx == true }
                }

                agent {
                    label "STFLOKYDLQCTR01"
                }

                steps{
                 checkMarxScan()
                }
            } 
*/
            stage('Checkmarx scan'){        	  
        	    when {
                    expression { params.runCheckmarxParam == true }                    
                }

                agent {
                    label "Checkmarx"
                }

                steps{
                	script{
                		  echo 'params.runCheckmarxParam=' + params.runCheckmarxParam
                	}
                    checkMarxScan()
                    
                 emailext body: 'Please find attached the latest scan PDF report.', attachmentsPattern: 'Checkmarx/Reports/**/*.pdf',
             recipientProviders: [[$class: 'RequesterRecipientProvider']], subject: "Merchant Fraud  Checkmarx scan PDF report", to: 'rupinder.singh3@fisglobal.com'
                 //sendEmailNotification repo: repoName, recipients: recipients
                    deleteDir()
                }
            }
        
            stage('Test with docker') {
                when {
                    expression { testWithDocker == true }
                }

                steps {
                    runTestsWithDocker image: MDS_TEST_IMAGE_NAME, container: MDS_TEST_CONTAINER_NAME, reportFile: REPORT_FILE
                }
            }

//            stage ('Publish unit test results') {
//                steps {
//                    publishJUnitTestResults reportFile: REPORT_FILE
//                }
//            }

            stage('Build src') {
                steps {
                	resolveVariablesInFile filePath: 'build.sh', reportFile: REPORT_FILE
                    runBuild reportFile: REPORT_FILE
                }
            }

            stage('Build image') {
                steps {
                	script {       
                		 if(!(env.BRANCH_NAME ==~ /^([0-9]+\.[0-9]+\.[0-9])/)) {                   			
                			 buildTag = "${env.BRANCH_NAME}-${env.BUILD_NUMBER}"                			
                         } else {
                        	 buildTag = "${env.BRANCH_NAME}-${GIT_COMMIT[0..7]}"                                           
                         }       		
                		 echo 'Tagging ' + buildTag
                     }
                    buildDockerImage repo: repoName, registry: nexusRegistry, tag: buildTag, reportFile: REPORT_FILE
                }
            }

            stage('Push image and update k8s resources yaml') {
            	environment {
           		 BUILD_TAG = "${buildTag}"
                }
                steps {
                    pushDockerImage repo: repoName, registry: nexusRegistry, tag: buildTag, reportFile: REPORT_FILE
                    resolveVariablesInFile filePath: 'resources.yaml', reportFile: REPORT_FILE
                    resolveVariablesInFile filePath: 'deployit-manifest.xml', reportFile: REPORT_FILE
                }
            }

            stage('Publish to XL Deploy') {
           	 when {
                    expression { params.publishToXld == true }
                }
               steps {
                   deployToXLD repo: repoName, tag: buildTag, reportFile: REPORT_FILE
               }
           }

           stage('Deploy to Kubernetes') {
           	when {
                   expression { params.deployToKubernetes == true }
               }
               steps {
                   deployToKubernetesViaXLD environmentId: "${xldEnvironmentFolder}", packageId: "${xldApplicationFolder}/${repoName}${branchNamePlaceholder}/${buildTag}"
               }
           }


//            stage('Health Check') {
//                steps {
//                    springHealthCheck url: params.healthCheckUrl, reportFile: REPORT_FILE
//                }
//            }

            /*stage('Qualys Security Scan') {
                steps {
                    qualysSecurityScan repo: repoName, tag: buildTag
                }
            }*/
        }

        post {
            always {
                sendEmailNotification repo: repoName, branch: env.BRANCH_NAME, recipients: params.recipients, reportFile: REPORT_FILE
                deleteDir() /* Clean up workspace */
            }
        }
    }
}




//sendEmailNotification






def call(Map config = [:]) {
    def result = 'PASSED'

    if(currentBuild.result == 'FAILURE' || currentBuild.result == 'Failure' || currentBuild.result == 'failed' || currentBuild.result == 'Still Failing') {
        result = 'FAILED'
    }

    sh "echo '</table>    </body>    </html>' >> ${config.reportFile}"
    echo "BUILD ${result}"
    emailext attachLog: true, body: '${FILE, path="index.html"}',
             recipientProviders: [[$class: 'RequesterRecipientProvider']],
             subject: "${config.repo} - Branch ${config.branch} - Build # ${env.BUILD_NUMBER} has ${result}", to: config.recipients
}





//sonarQubeScan


def call(Map config = [:]) {
    echo 'Building source...'
    //sh "echo '<tr><td>Build src</td><td>' >> ${config.reportFile}"

    try {

        withSonarQubeEnv('sonarqube') {

            sh "mvn -B -U sonar:sonar -DskipTests -Dsonar.qualitygate.wait=true -Dsonar.qualitygate.timeout=30"
        }

        //stash includes: 'target/*', name: 'builtSources'
        //sh """ echo '<font color="green">Successful</font></td></tr>' >> ${config.reportFile} """

    } catch (exception) {

        echo 'Failure scanning'
        //sh """ echo '<font color="red">Failed</font></td></tr>' >> ${config.reportFile} """
        error(exception.toString())
    }
}








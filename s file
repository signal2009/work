def call(Map config = [:]) {
    String projectName = config.projectName
    String projectSuffix = config.projectSuffix
    String teamPath = config.teamPath

    echo "Running checkmarx scan, inside of call"
    step([$class: 'CxScanBuilder',
        avoidDuplicateProjectScans: true,
        comment: 'scan created by jenkins',

        credentialsId: 'launchpad-api-checkmarx-creds',
        excludeFolders: '!**/*modules/**, modules',
        //          excludeOpenSourceFolders: '',
        exclusionsSetting: 'job',
        filterPattern: "!**/_cvs/**/*, !**/.svn/**/*,   !**/.hg/**/*,   !**/.git/**/*,  !**/.bzr/**/*, !**/bin/**/*, !**/obj/**/*,  !**/backup/**/*, !**/.idea/**/*, !**/*.DS_Store, !**/*.jar, !**/*.war, !**/*.jar.original, !**/*.war.original, !**/*.ipr,     !**/*.iws, !**/*.bak,     !**/*.tmp,       !**/*.aac,      !**/*.aif,      !**/*.iff,     !**/*.m3u, !**/*.mid, !**/*.mp3, !**/*.mpa,     !**/*.ra,        !**/*.wav,      !**/*.wma,      !**/*.3g2,     !**/*.3gp, !**/*.asf, !**/*.asx, !**/*.avi,     !**/*.flv,       !**/*.mov,      !**/*.mp4,      !**/*.mpg,     !**/*.rm,  !**/*.swf, !**/*.vob, !**/*.wmv,     !**/*.bmp,       !**/*.gif,      !**/*.jpg,      !**/*.png,     !**/*.psd, !**/*.tif, !**/*.swf, !**/*.zip,       !**/*.rar,      !**/*.exe,      !**/*.dll,     !**/*.pdb, !**/*.7z,  !**/*.gz, !**/*.tar.gz,  !**/*.tar,       !**/*.gz,       !**/*.ahtm,     !**/*.ahtml,   !**/*.fhtml, !**/*.hdm, !**/*.hdml,    !**/*.hsql,      !**/*.ht,       !**/*.hta,      !**/*.htc,     !**/*.htd, !**/*.ear, !**/*.htmls,   !**/*.ihtml,     !**/*.mht,      !**/*.mhtm,     !**/*.mhtml,   !**/*.ssi, !**/*.stm, !**/*.stml,    !**/*.ttml,      !**/*.txn,      !**/*.xhtm,     !**/*.xhtml,   !**/*.class, !**/*.iml, !Checkmarx/Reports/*.*",
        failBuildOnNewResults: true,
        fullScanCycle: 10,
        generatePdfReport: true,
        teamPath: "\\CxServer\\SP\\WorldPay\\${teamPath}",
        //          includeOpenSourceFolders: '',
        osaArchiveIncludePatterns: '*.zip, *.war, *.ear, *.tgz',
        osaInstallBeforeScan: false, preset: '100000',
        projectName: "${projectName}_${projectSuffix}",
        sastEnabled: true,
        sourceEncoding: '1',
        //          username: '',
        vulnerabilityThresholdEnabled: true,
        highThreshold: 0,
        mediumThreshold: 10,
        jobStatusOnError: "FAILURE",
        enableProjectPolicyEnforcement: true,
        waitForResultsEnabled: true])

    // Archive the artifacts for easy readability
    archiveArtifacts artifacts: 'Checkmarx/Reports/*.pdf',
        allowEmptyArchive: true

    def report = readFile "Checkmarx/Reports/Report_CxSAST.html"    
    if (!report.contains("Checkmarx Scan Passed")) {
        echo "Checkmarx has failed"
        sh "exit 1"
    }
}
